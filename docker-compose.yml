# D:\Project\telegram_data_pipeline\docker-compose.yml
services:
  db:
    image: postgres:15-alpine # Use a lightweight PostgreSQL image
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data
    ports:
      - "5432:5432" # Expose PostgreSQL on host port 5432
    healthcheck: # Healthcheck for dbt to wait for DB
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: . # Build context is the current directory (root) for the main Dockerfile
      dockerfile: Dockerfile # Refers to the Dockerfile in the root
    container_name: telegram_scraper_app
    env_file:
      - .env # Load environment variables from .env file
    volumes:
      - ./data/raw:/app/data/raw # Mount host's raw data folder to container
      - ./logs:/app/logs         # Mount host's logs folder to container
      - ./telegram_messages:/app/telegram_messages # For Telethon to save messages/files
      - ./telegram_images:/app/telegram_images   # For Telethon to save images
      # Ensure Telethon's session file is also persisted
      - ./telegram_sessions:/app/telegram_sessions # Dedicated volume for session files
    ports:
      - "8000:8000" # Expose FastAPI port
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before app starts

  dbt:
    build:
      context: ./dbt_project # Build context is the dbt_project directory
      dockerfile: Dockerfile # Refers to dbt_project/Dockerfile
    container_name: dbt_cli
    env_file:
      - .env # Load environment variables for dbt connection
    volumes:
      # Removed: - ./dbt_project:/dbt_project # No longer needed, project is copied into image
      - ./data/raw:/dbt_project/data/raw
      - ./data/processed:/dbt_project/data/processed
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before dbt runs

volumes:
  postgres_data: # Define the named volume for PostgreSQL data persistence